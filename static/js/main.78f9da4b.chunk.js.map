{"version":3,"sources":["utils/asyncHelpers.js","components/useDropdown.js","components/Pagination.js","utils/helpers.js","components/Restaurant.js","components/Restaurants.js","components/SearchParams.js","App.js","serviceWorker.js","index.js"],"names":["setRestaurantData","setLoading","setRestaurants","a","axios","url","headers","result","sortedData","data","sort","b","name","searchTerm","genre","stateData","states","results","hasOwn","filter","state","i","hasOwnProperty","stateAbbreviation","Object","values","toString","restaurant","toLowerCase","includes","city","useDropdown","label","defaultState","options","useState","setState","id","replace","htmlFor","value","onChange","e","target","onBlur","disabled","length","map","item","key","Pagination","restaurantsPerPage","totalRestaurants","paginate","currentPage","pageNumbers","Math","ceil","push","className","number","onClick","stateNames","_","keys","Restaurant","restaurantInformation","telephone","genres","split","join","Restaurants","restaurants","loading","headersList","header","restaurantTableItems","noRestaurantsFound","align","colspan","SearchParams","restaurantData","setGenres","setSearchTerm","GenreDropdown","StateDropdown","itemsPerPage","setCurrentPage","useEffect","fetchRestaurantData","newGenres","concat","apply","genreSet","Set","genresArray","indexOfLastRestaurant","indexOfFirstRestaurant","currentRestaurants","slice","onSubmit","preventDefault","fetchSearchedRestaurants","placeholder","pageNumber","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"6VAEO,WAAmCA,EAAmBC,EAAYC,GAAlE,iBAAAC,EAAA,6DACLF,GAAW,GADN,SAEgBG,IAAM,CACzBC,IAAK,6DACLC,QAAS,CAAC,cAAiB,0BAJxB,OAECC,EAFD,OAMCC,EAAaD,EAAOE,KAAKC,MAAK,SAASP,EAAGQ,GAC9C,OAAGR,EAAES,KAAOD,EAAEC,MAAgB,EAC3BT,EAAES,KAAOD,EAAEC,KAAe,EACtB,KAETZ,EAAkBQ,GAClBN,EAAeM,GACfP,GAAW,GAbN,4C,kEAgBA,WAAwCC,EAAgBD,EAAYY,EAAYC,EAAOC,EAAWC,GAAlG,qBAAAb,EAAA,6DACLF,GAAW,GADN,SAEgBG,IAAM,CACzBC,IAAK,6DACLC,QAAS,CAAC,cAAiB,0BAJxB,OAECC,EAFD,OAODU,EAAUV,EAAOE,KAEfS,EAAuB,QAAdH,EAAsB,CAAC,CAAC,MAAS,QAAUC,EAAOG,QAAO,SAACC,EAAOC,GAAR,OAAcD,EAAME,eAAeP,MACrGQ,EAAoBC,OAAOC,OAAOP,EAAO,IAAIQ,WAEjC,QAAdX,IACFE,EAAUA,EAAQE,QAAO,SAAAQ,GAAU,OAAIA,EAAWP,QAAUG,MAGhD,QAAVT,IACFG,EAAUA,EAAQE,QAAO,SAAAQ,GAAU,OAAIA,EAAWb,MAAMc,cAAcC,SAASf,EAAMc,mBAGpE,KAAff,IACFI,EAAUA,EAAQE,QAAO,SAAAQ,GAAU,OAAIA,EAAWf,KAAKgB,cAAcC,SAAShB,EAAWe,gBAAkBD,EAAWb,MAAMc,cAAcC,SAAShB,EAAWe,gBAAkBD,EAAWG,KAAKF,cAAcC,SAAShB,EAAWe,mBAGpO1B,EAAee,EAAQP,MAAK,SAASP,EAAGQ,GACtC,OAAGR,EAAES,KAAOD,EAAEC,MAAgB,EAC3BT,EAAES,KAAOD,EAAEC,KAAe,EACtB,MAETX,GAAW,GA7BN,6C,sBChBP,IA0Be8B,EA1BK,SAACC,EAAOC,EAAcC,GAAa,IAAD,EAC1BC,mBAASF,GADiB,mBAC7Cb,EAD6C,KACtCgB,EADsC,KAE9CC,EAAE,uBAAmBL,EAAMM,QAAQ,IAAK,IAAIV,eAqBlD,MAAO,CAACR,EApBS,kBACf,2BAAOmB,QAASF,GACbL,EACD,4BACEK,GAAIA,EACJG,MAAOpB,EACPqB,SAAU,SAAAC,GAAC,OAAIN,EAASM,EAAEC,OAAOH,QACjCI,OAAQ,SAAAF,GAAC,OAAIN,EAASM,EAAEC,OAAOH,QAC/BK,SAA6B,IAAnBX,EAAQY,QAElB,uCACCZ,EAAQa,KAAI,SAAAC,GAAI,OACf,4BAAQC,IAAKD,EAAMR,MAAOQ,GACvBA,SAOcZ,ICDZc,EAtBI,SAAC,GAGlB,IAHuF,IAAnEC,EAAkE,EAAlEA,mBAAoBC,EAA8C,EAA9CA,iBAAkBC,EAA4B,EAA5BA,SAAUC,EAAkB,EAAlBA,YAC9DC,EAAc,GAEXlC,EAAI,EAAGA,GAAKmC,KAAKC,KAAKL,EAAmBD,GAAqB9B,IACrEkC,EAAYG,KAAKrC,GAGnB,OACE,6BACE,wBAAIsC,UAAU,cACXJ,EAAYR,KAAI,SAAAa,GAAM,OACrB,wBAAIX,IAAKW,EAAQD,UAAU,aACzB,4BAAQE,QAAS,kBAAMR,EAASO,IAASD,UAAWL,IAAgBM,EAAS,mBAAqB,aAC/FA,U,OCfF5C,EAAS,CAAC,CAAC,QAAW,MACZ,CAAC,OAAU,MACX,CAAC,QAAW,MACZ,CAAC,SAAY,MACb,CAAC,WAAc,MACf,CAAC,SAAY,MACb,CAAC,YAAe,MAChB,CAAC,SAAY,MACb,CAAC,uBAAwB,MACzB,CAAC,QAAW,MACZ,CAAC,QAAW,MACZ,CAAC,OAAU,MACX,CAAC,MAAS,MACV,CAAC,SAAY,MACb,CAAC,QAAW,MACZ,CAAC,KAAQ,MACT,CAAC,OAAU,MACX,CAAC,SAAY,MACb,CAAC,UAAa,MACd,CAAC,MAAS,MACV,CAAC,SAAY,MACb,CAAC,cAAiB,MAClB,CAAC,SAAY,MACb,CAAC,UAAa,MACd,CAAC,YAAe,MAChB,CAAC,SAAY,MACb,CAAC,QAAW,MACZ,CAAC,SAAY,MACb,CAAC,OAAU,MACX,CAAC,gBAAiB,MAClB,CAAC,aAAc,MACf,CAAC,aAAc,MACf,CAAC,WAAY,MACb,CAAC,iBAAkB,MACnB,CAAC,eAAgB,MACjB,CAAC,KAAQ,MACT,CAAC,SAAY,MACb,CAAC,OAAU,MACX,CAAC,aAAgB,MACjB,CAAC,eAAgB,MACjB,CAAC,iBAAkB,MACnB,CAAC,eAAgB,MACjB,CAAC,UAAa,MACd,CAAC,MAAS,MACV,CAAC,KAAQ,MACT,CAAC,QAAW,MACZ,CAAC,SAAY,MACb,CAAC,WAAc,MACf,CAAC,gBAAiB,MAClB,CAAC,UAAa,MACd,CAAC,QAAW,OAGtB8C,EAAa9C,EAAO+B,KAAI,SAACgB,EAAE1C,GAAH,OAASG,OAAOwC,KAAKhD,EAAOK,OCrClD4C,EAdI,SAAC,GAA+B,IAA7BC,EAA4B,EAA5BA,sBACZtD,EAAwCsD,EAAxCtD,KAAMkB,EAAkCoC,EAAlCpC,KAAMV,EAA4B8C,EAA5B9C,MAAO+C,EAAqBD,EAArBC,UACrBC,EAD0CF,EAAVpD,MACjBuD,MAAM,KAAKC,KAAK,MAErC,OACE,wBAAIX,UAAU,aACZ,wBAAIA,UAAU,cAAc/C,GAC5B,wBAAI+C,UAAU,cAAc7B,EAA5B,KAAoCV,GACpC,wBAAIuC,UAAU,cAAcQ,GAC5B,wBAAIR,UAAU,cAAcS,KCsCnBG,G,MA7CK,SAAC,GAA8B,IAA5BC,EAA2B,EAA3BA,YACrB,GADgD,EAAdC,QAEhC,OAAO,0CAGT,IACMC,EADU,CAAC,OAAQ,WAAY,YAAa,UACtB3B,KAAI,SAAC4B,EAAQtD,GACvC,OACE,wBAAIsC,UAAW,eAAgBV,IAAK5B,GACjCsD,MAKDC,EAAuBJ,EAC1B9D,MAAK,SAASP,EAAGQ,GAChB,OAAGR,EAAES,KAAOD,EAAEC,MAAgB,EAC3BT,EAAES,KAAOD,EAAEC,KAAe,EACtB,KAERmC,KAAI,SAAApB,GAAU,OACb,kBAAC,EAAD,CACEsB,IAAKtB,EAAWU,GAChB6B,sBAAuBvC,OAIvBkD,EAAqB,4BAAI,wBAAIC,MAAM,SAASC,QAAQ,KAA3B,8BAG/B,OACE,2BAAOpB,UAAU,oBACf,+BACE,4BACGe,IAGL,+BACKF,EAAY1B,QAAU,GAAK+B,EAC3BD,MC+BII,EAnEM,WAAO,IAAD,EACmB7C,mBAAS,IAD5B,mBAClB8C,EADkB,KACFjF,EADE,OAEamC,mBAAS,IAFtB,mBAElBqC,EAFkB,KAELtE,EAFK,OAGGiC,mBAAS,IAHZ,mBAGlBiC,EAHkB,KAGVc,EAHU,OAIK/C,mBAAS,IAJd,mBAIlBsC,EAJkB,KAITxE,EAJS,OAKWkC,mBAAS,IALpB,mBAKlBtB,EALkB,KAKNsE,EALM,OAMMpD,EAAY,SAAU,MAAOqC,GANnC,mBAMlBtD,EANkB,KAMXsE,EANW,OAOUrD,EAAY,SAAU,MAAO+B,GAPvC,mBAOlB/C,EAPkB,KAOPsE,EAPO,OAQFlD,mBAAS,IAAzBmD,EARkB,sBASanD,mBAAS,GATtB,mBASlBmB,EATkB,KASLiC,EATK,KAWzBC,qBAAU,YNhBL,SAAP,+BMiBIC,CAAoBzF,EAAmBC,EAAYC,KAClD,IAEHsF,qBAAU,YHiCe,SAACP,EAAgBC,GAC1C,IAAMd,EAASa,EAAelC,KAAI,qBAAGjC,MAAkBuD,MAAM,QACvDqB,EAAY,GAAGC,OAAOC,MAAM,GAAhB,YAAwBxB,IACpCyB,EAAW,IAAIC,IAAIJ,GAEzBR,EADoB,YAAOW,GACFnF,QGrCvBqF,CAAYd,EAAgBC,KAC3B,CAACD,IAEJO,qBAAU,WACW,KAAf3E,IACF0E,EAAe,GACfrF,EAAe+E,MAGhB,CAACpE,EAAWoE,IAEf,IAAMe,EAAwB1C,EAAcgC,EACtCW,EAAyBD,EAAwBV,EACjDY,EAAqB1B,EAAY2B,MAAMF,EAAwBD,GAE/D5C,EAAmBoB,EAAY1B,OAIrC,OACE,yBAAKa,UAAU,iBACb,0BAAMyC,SAAU,SAAC1D,GACfA,EAAE2D,iBACFd,EAAe,GN5BhB,SAAP,qCM6BQe,CAAyBpG,EAAgBD,EAAYY,EAAYC,EAAOC,EAAWC,KAEnF,2BAAOuB,QAAQ,UAAf,SAEE,2BACEF,GAAG,SACHG,MAAO3B,EACP0F,YAAY,YACZ9D,SAAU,SAAAC,GAAC,OAAIyC,EAAczC,EAAEC,OAAOH,WAG1C,kBAAC4C,EAAD,MACA,kBAACC,EAAD,MACA,4BAAQ1B,UAAU,UAAlB,WAEF,kBAAC,EAAD,CAAaa,YAAa0B,EAAoBzB,QAASA,IACvD,kBAAC,EAAD,CACEtB,mBAAoBmC,EACpBlC,iBAAkBA,EAClBC,SA1BW,SAAAmD,GAAU,OAAIjB,EAAeiB,IA2BxClD,YAAaA,MCvDNmD,MATf,WACE,OACE,yBAAK9C,UAAU,OACb,wBAAIA,UAAU,UAAd,eACA,kBAAC,EAAD,QCKc+C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.78f9da4b.chunk.js","sourcesContent":["import axios from 'axios';\n\nexport async function fetchRestaurantData(setRestaurantData, setLoading, setRestaurants) {\n  setLoading(true);\n  const result = await axios({\n    url: 'https://code-challenge.spectrumtoolbox.com/api/restaurants',\n    headers: {'Authorization': 'Api-Key q3MNxtfep8Gt'}\n  });\n  const sortedData = result.data.sort(function(a, b){\n    if(a.name < b.name) { return -1; }\n    if(a.name > b.name) { return 1; }\n    return 0;\n  });\n  setRestaurantData(sortedData);\n  setRestaurants(sortedData);\n  setLoading(false);\n}\n\nexport async function fetchSearchedRestaurants(setRestaurants, setLoading, searchTerm, genre, stateData, states) {\n  setLoading(true);\n  const result = await axios({\n    url: 'https://code-challenge.spectrumtoolbox.com/api/restaurants',\n    headers: {'Authorization': 'Api-Key q3MNxtfep8Gt'}\n  });\n\n  let results = result.data;\n\n  const hasOwn = stateData === 'All' ? [{'state': 'All'}] : states.filter((state, i) => state.hasOwnProperty(stateData));\n  const stateAbbreviation = Object.values(hasOwn[0]).toString();\n\n  if (stateData !== \"All\") {\n    results = results.filter(restaurant => restaurant.state === stateAbbreviation);\n  }\n\n  if (genre !== \"All\") {\n    results = results.filter(restaurant => restaurant.genre.toLowerCase().includes(genre.toLowerCase()));\n  }\n\n  if (searchTerm !== \"\") {\n    results = results.filter(restaurant => restaurant.name.toLowerCase().includes(searchTerm.toLowerCase()) || restaurant.genre.toLowerCase().includes(searchTerm.toLowerCase()) || restaurant.city.toLowerCase().includes(searchTerm.toLowerCase()))\n  }\n\n  setRestaurants(results.sort(function(a, b){\n    if(a.name < b.name) { return -1; }\n    if(a.name > b.name) { return 1; }\n    return 0;\n  }));\n  setLoading(false);\n}","import React, { useState } from \"react\";\n\nconst useDropdown = (label, defaultState, options) => {\n  const [state, setState] = useState(defaultState);\n  const id = `use-dropdown-${label.replace(\" \", \"\").toLowerCase()}`;\n  const Dropdown = () => (\n    <label htmlFor={id}>\n      {label}\n      <select\n        id={id}\n        value={state}\n        onChange={e => setState(e.target.value)}\n        onBlur={e => setState(e.target.value)}\n        disabled={options.length === 0}\n      >\n        <option>All</option>\n        {options.map(item => (\n          <option key={item} value={item}>\n            {item}\n          </option>\n        ))}\n      </select>\n    </label>\n  );\n\n  return [state, Dropdown, setState];\n};\n\nexport default useDropdown;\n","import React from 'react';\n\nconst Pagination = ({ restaurantsPerPage, totalRestaurants, paginate, currentPage }) => {\n  const pageNumbers = [];\n\n  for (let i = 1; i <= Math.ceil(totalRestaurants / restaurantsPerPage); i++) {\n    pageNumbers.push(i);\n  }\n\n  return (\n    <nav>\n      <ul className='pagination'>\n        {pageNumbers.map(number => (\n          <li key={number} className='page-item'>\n            <button onClick={() => paginate(number)} className={currentPage === number ? 'page-link active' : 'page-link'}>\n              {number}\n            </button>\n          </li>\n        ))}\n      </ul>\n    </nav>\n  );\n};\n\nexport default Pagination;","export const states = [{'Alabama': 'AL'},\n                       {'Alaska': 'AK'},\n                       {'Arizona': 'AZ'},\n                       {'Arkansas': 'AR'},\n                       {'California': 'CA'},\n                       {'Colorado': 'CO'},\n                       {'Connecticut': 'CT'},\n                       {'Delaware': 'DE'},\n                       {'District of Columbia': 'DC'},\n                       {'Florida': 'FL'},\n                       {'Georgia': 'GA'},\n                       {'Hawaii': 'HI'},\n                       {'Idaho': 'ID'},\n                       {'Illinois': 'IL'},\n                       {'Indiana': 'IN'},\n                       {'Iowa': 'IA'},\n                       {'Kansas': 'KS'},\n                       {'Kentucky': 'KY'},\n                       {'Louisiana': 'LA'},\n                       {'Maine': 'ME'},\n                       {'Maryland': 'MD'},\n                       {'Massachusetts': 'MA'},\n                       {'Michigan': 'MI'},\n                       {'Minnesota': 'MN'},\n                       {'Mississippi': 'MS'},\n                       {'Missouri': 'MO'},\n                       {'Montana': 'MT'},\n                       {'Nebraska': 'NE'},\n                       {'Nevada': 'NV'},\n                       {'New Hampshire': 'NH'},\n                       {'New Jersey': 'NJ'},\n                       {'New Mexico': 'NM'},\n                       {'New York': 'NY'},\n                       {'North Carolina': 'NC'},\n                       {'North Dakota': 'ND'},\n                       {'Ohio': 'OH'},\n                       {'Oklahoma': 'OK'},\n                       {'Oregon': 'OR'},\n                       {'Pennsylvania': 'PA'},\n                       {'Rhode Island': 'RI'},\n                       {'South Carolina': 'SC'},\n                       {'South Dakota': 'SD'},\n                       {'Tennessee': 'TN'},\n                       {'Texas': 'TX'},\n                       {'Utah': 'UT'},\n                       {'Vermont': 'VT'},\n                       {'Virginia': 'VA'},\n                       {'Washington': 'WA'},\n                       {'West Virginia': 'WV'},\n                       {'Wisconsin': 'WI'},\n                       {'Wyoming': 'WY'}\n                      ]\n\nexport const stateNames = states.map((_,i) => Object.keys(states[i]));\n\nexport const genresArray = (restaurantData, setGenres) => {\n  const genres = restaurantData.map(({ genre }) => genre.split(\",\"));\n  const newGenres = [].concat.apply([], [...genres]);\n  const genreSet = new Set(newGenres);\n  const filteredGenres = [...genreSet];\n  setGenres(filteredGenres.sort());\n}\n","import React from 'react'\n\nconst Restaurant = ({ restaurantInformation }) => {\n  const { name, city, state, telephone, genre } = restaurantInformation;\n  const genres = genre.split(',').join(', ')\n\n  return (\n    <tr className=\"table-row\">\n      <td className='table-data'>{name}</td>\n      <td className='table-data'>{city}, {state}</td>\n      <td className='table-data'>{telephone}</td>\n      <td className='table-data'>{genres}</td>\n    </tr>\n  )\n}\n\nexport default Restaurant;","import React from 'react';\nimport Restaurant from './Restaurant';\nimport '../App.css';\n\nconst Restaurants = ({ restaurants, loading }) => {\n  if (loading) {\n    return <h2>Loading...</h2>;\n  }\n\n  const headers = ['Name', 'Location', 'Telephone', 'Genres'];\n  const headersList = headers.map((header, i) => {\n    return (\n      <th className={'table-header'} key={i}>\n        {header}\n      </th>\n    )\n  });\n\n  const restaurantTableItems = restaurants\n    .sort(function(a, b){\n      if(a.name < b.name) { return -1; }\n      if(a.name > b.name) { return 1; }\n      return 0;\n      })\n    .map(restaurant =>\n      <Restaurant \n        key={restaurant.id}\n        restaurantInformation={restaurant}\n      />\n    );\n  \n  const noRestaurantsFound = <tr><td align=\"center\" colspan=\"4\">No available Restaurants.</td></tr>\n  \n  \n  return (\n    <table className=\"restaurant-table\">\n      <thead>\n        <tr>\n          {headersList}\n        </tr>\n      </thead>\n      <tbody>\n          {restaurants.length <= 0 && noRestaurantsFound}\n          {restaurantTableItems}\n      </tbody>\n    </table>\n  )\n};\n\nexport default Restaurants;","import React, { useEffect, useState } from 'react';\nimport { fetchRestaurantData, fetchSearchedRestaurants } from '../utils/asyncHelpers';\nimport useDropdown from './useDropdown';\nimport Pagination from './Pagination';\nimport { genresArray, states, stateNames } from '../utils/helpers'; \nimport Restaurants from './Restaurants';\n\nconst SearchParams = () => {\n  const [restaurantData, setRestaurantData] = useState([]);\n  const [restaurants, setRestaurants] = useState([]);\n  const [genres, setGenres] = useState([]);\n  const [loading, setLoading] = useState([]);\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [genre, GenreDropdown] = useDropdown(\"Genres\", \"All\", genres);\n  const [stateData, StateDropdown] = useDropdown(\"States\", \"All\", stateNames);\n  const [itemsPerPage] = useState(10);\n  const [currentPage, setCurrentPage] = useState(1);\n\n  useEffect(() => {\n    fetchRestaurantData(setRestaurantData, setLoading, setRestaurants);\n  }, []);\n\n  useEffect(() => {\n    genresArray(restaurantData, setGenres);\n  }, [restaurantData]);\n\n  useEffect(() => {\n    if (searchTerm === \"\") {\n      setCurrentPage(1)\n      setRestaurants(restaurantData);\n    }\n    \n  }, [searchTerm,restaurantData])\n\n  const indexOfLastRestaurant = currentPage * itemsPerPage;\n  const indexOfFirstRestaurant = indexOfLastRestaurant - itemsPerPage;\n  const currentRestaurants = restaurants.slice(indexOfFirstRestaurant, indexOfLastRestaurant);\n\n  const totalRestaurants = restaurants.length\n\n  const paginate = pageNumber => setCurrentPage(pageNumber);\n\n  return (\n    <div className=\"search-params\">\n      <form onSubmit={(e) => {\n        e.preventDefault();\n        setCurrentPage(1);\n        fetchSearchedRestaurants(setRestaurants, setLoading, searchTerm, genre, stateData, states);\n      }}>\n        <label htmlFor=\"search\">\n          Search\n          <input\n            id=\"search\"\n            value={searchTerm}\n            placeholder=\"Search...\"\n            onChange={e => setSearchTerm(e.target.value)}\n          />\n        </label>\n        <GenreDropdown />\n        <StateDropdown />\n        <button className=\"submit\">Submit</button>\n      </form>\n      <Restaurants restaurants={currentRestaurants} loading={loading}/>\n      <Pagination\n        restaurantsPerPage={itemsPerPage}\n        totalRestaurants={totalRestaurants}\n        paginate={paginate}\n        currentPage={currentPage}\n      />\n\n    </div>\n  );\n};\n\nexport default SearchParams;\n","import React from 'react';\nimport SearchParams from './components/SearchParams';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <h1 className=\"header\">Restaurants</h1>\n      <SearchParams />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}